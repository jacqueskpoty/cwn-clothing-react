{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SEWA\\\\Desktop\\\\Udemy Courses\\\\React\\\\cwn-clothing\\\\client\\\\src\\\\Components\\\\SignIn\\\\SignIn.Component.jsx\";\nimport React, { useState } from 'react';\nimport './SignIn.Style.scss';\nimport FormInput from '../FormInput/FormInput.Component';\nimport CustomButton from '../CustomButton/CustomButton.Component';\nimport { googleSignInStart, emailPassWordSignInStart } from '../../Redux/User/User.Action';\nimport { connect } from 'react-redux';\n\nconst SignIn = ({\n  googleSignInStart,\n  emailPassWordSignInStart\n}) => {\n  const [credentials, setCredentials] = useState({\n    email: '',\n    password: ''\n  });\n  const {\n    email,\n    password\n  } = credentials;\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n    emailPassWordSignInStart(email, password);\n    setCredentials({\n      email: '',\n      password: ''\n    });\n  };\n\n  const handleChange = event => {\n    const {\n      value,\n      name\n    } = event.target;\n    setCredentials({ ...credentials,\n      [name]: value\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"sign-in\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }\n  }, \"I already have an account\"), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }\n  }, \"Sign in with your email and password\"), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(FormInput, {\n    handleChange: handleChange,\n    label: \"Email\",\n    type: \"email\",\n    name: \"email\",\n    value: email,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(FormInput, {\n    handleChange: handleChange,\n    label: \"Password\",\n    type: \"password\",\n    name: \"password\",\n    value: password,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"buttons\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(CustomButton, {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 21\n    }\n  }, \"SIGN IN\"), /*#__PURE__*/React.createElement(CustomButton, {\n    type: \"button\",\n    isSignInWithGoogle: true,\n    onClick: googleSignInStart,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 21\n    }\n  }, \"Google Sign In\"))));\n};\n\nconst mapDispatchToProps = dispatch => ({\n  googleSignInStart: () => dispatch(googleSignInStart()),\n  emailPassWordSignInStart: (email, password) => dispatch(emailPassWordSignInStart({\n    email,\n    password\n  }))\n});\n\nexport default connect(null, mapDispatchToProps)(SignIn);","map":{"version":3,"sources":["C:/Users/SEWA/Desktop/Udemy Courses/React/cwn-clothing/client/src/Components/SignIn/SignIn.Component.jsx"],"names":["React","useState","FormInput","CustomButton","googleSignInStart","emailPassWordSignInStart","connect","SignIn","credentials","setCredentials","email","password","handleSubmit","event","preventDefault","handleChange","value","name","target","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, {useState} from 'react'\r\nimport './SignIn.Style.scss'\r\nimport FormInput from '../FormInput/FormInput.Component'\r\nimport CustomButton from '../CustomButton/CustomButton.Component'\r\nimport { googleSignInStart,emailPassWordSignInStart } from '../../Redux/User/User.Action';\r\nimport { connect } from 'react-redux';\r\n\r\nconst  SignIn = ({googleSignInStart,emailPassWordSignInStart}) => {\r\n\r\n    const [credentials, setCredentials] = useState({email:'',password:''});\r\n    const {email, password} = credentials;\r\n\r\n    const handleSubmit = async event =>{\r\n        event.preventDefault();\r\n\r\n        emailPassWordSignInStart(email,password);\r\n\r\n        setCredentials({email:'', password:''});\r\n    }\r\n\r\n    const handleChange = event => {\r\n        const { value, name } = event.target;\r\n\r\n        setCredentials({...credentials,[name] : value});\r\n    }\r\n\r\n    return(\r\n        <div className='sign-in'>\r\n            <h2 className='title'>I already have an account</h2>\r\n            <span>Sign in with your email and password</span>\r\n            <form onSubmit={handleSubmit}>\r\n                <FormInput handleChange={handleChange} label=\"Email\" type=\"email\" name=\"email\" value={email} />\r\n\r\n                <FormInput handleChange={handleChange} label=\"Password\" type=\"password\" name=\"password\" value={password} />\r\n                <div className='buttons'>\r\n                    <CustomButton type=\"submit\">SIGN IN</CustomButton>\r\n                    <CustomButton type=\"button\" isSignInWithGoogle onClick={googleSignInStart} >\r\n                        Google Sign In\r\n                    </CustomButton>\r\n                </div>\r\n            </form>\r\n        </div>    \r\n    );\r\n    \r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    googleSignInStart:  () => dispatch(googleSignInStart()),\r\n    emailPassWordSignInStart: (email,password)=> dispatch(emailPassWordSignInStart({email,password}))\r\n})\r\nexport default connect(null, mapDispatchToProps)(SignIn);"]},"metadata":{},"sourceType":"module"}