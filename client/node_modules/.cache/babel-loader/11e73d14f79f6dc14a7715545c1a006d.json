{"ast":null,"code":"import { takeLatest, call, put, all } from 'redux-saga/effects';\nimport { userActionTypes } from './User.Types';\nimport { googleProvider, auth, createUserProfileDocument, getCurrentUser } from '../../Firebase/Firebase.Utils';\nimport { signInFailed, signInSuccess } from './User.Action';\n\nfunction* signIn(user) {\n  try {\n    const userRef = yield call(createUserProfileDocument, user);\n    const userSnapShopt = yield userRef.get();\n    yield put(signInSuccess({\n      id: userSnapShopt.id,\n      ...userSnapShopt.data()\n    }));\n  } catch (error) {\n    yield put(signInFailed(error));\n  }\n}\n\nexport function* onGoogleSignInStart() {\n  yield takeLatest(userActionTypes.LOGIN_WITH_GOOGLE_START, signInWithGoogle);\n}\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield call(signIn, user);\n  } catch (error) {\n    yield put(signInFailed(error));\n  }\n}\nexport function* onEmailPasswordSignInStart() {\n  yield takeLatest(userActionTypes.LOGIN_WITH_EMAIL_PASSWORD_START, emailPasswordSignIn);\n}\nexport function* emailPasswordSignIn({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield call(signIn, user);\n  } catch (error) {\n    yield put(signInFailed(error));\n  }\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(userActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* isUserAuthenticated() {\n  try {\n    const authUser = yield getCurrentUser();\n\n    if (!authUser) {\n      return;\n    }\n\n    yield call(signIn, authUser);\n  } catch (error) {\n    yield put(signInFailed(error));\n  }\n}\nonCheckUserSession;\nexport function* userSaga() {\n  yield all([call(onGoogleSignInStart), call(onEmailPasswordSignInStart), call(onCheckUserSession)]);\n}","map":{"version":3,"sources":["C:/Users/SEWA/Desktop/Udemy Courses/React/cwn-clothing/src/Redux/User/User.Sagas.js"],"names":["takeLatest","call","put","all","userActionTypes","googleProvider","auth","createUserProfileDocument","getCurrentUser","signInFailed","signInSuccess","signIn","user","userRef","userSnapShopt","get","id","data","error","onGoogleSignInStart","LOGIN_WITH_GOOGLE_START","signInWithGoogle","signInWithPopup","onEmailPasswordSignInStart","LOGIN_WITH_EMAIL_PASSWORD_START","emailPasswordSignIn","payload","email","password","signInWithEmailAndPassword","onCheckUserSession","CHECK_USER_SESSION","isUserAuthenticated","authUser","userSaga"],"mappings":"AAAA,SAAQA,UAAR,EAAmBC,IAAnB,EAAwBC,GAAxB,EAA4BC,GAA5B,QAAsC,oBAAtC;AACA,SAASC,eAAT,QAAiC,cAAjC;AACA,SAASC,cAAT,EAAwBC,IAAxB,EAA6BC,yBAA7B,EAAuDC,cAAvD,QAA6E,+BAA7E;AACA,SAASC,YAAT,EAAuBC,aAAvB,QAA4C,eAA5C;;AAGA,UAAWC,MAAX,CAAkBC,IAAlB,EAAuB;AACnB,MAAI;AACA,UAAMC,OAAO,GAAG,MAAMZ,IAAI,CAACM,yBAAD,EAA2BK,IAA3B,CAA1B;AACA,UAAME,aAAa,GAAG,MAAMD,OAAO,CAACE,GAAR,EAA5B;AAEA,UAAMb,GAAG,CAACQ,aAAa,CAAC;AAACM,MAAAA,EAAE,EAAEF,aAAa,CAACE,EAAnB;AAAsB,SAAGF,aAAa,CAACG,IAAd;AAAzB,KAAD,CAAd,CAAT;AAEH,GAND,CAME,OAAOC,KAAP,EAAc;AACb,UAAMhB,GAAG,CAACO,YAAY,CAACS,KAAD,CAAb,CAAT;AACF;AACJ;;AAED,OAAO,UAAUC,mBAAV,GAA+B;AAClC,QAAMnB,UAAU,CAACI,eAAe,CAACgB,uBAAjB,EAAyCC,gBAAzC,CAAhB;AACH;AAED,OAAO,UAAUA,gBAAV,GAA4B;AAC/B,MAAI;AAEA,UAAM;AAAET,MAAAA;AAAF,QAAW,MAAMN,IAAI,CAACgB,eAAL,CAAqBjB,cAArB,CAAvB;AACA,UAAMJ,IAAI,CAACU,MAAD,EAAQC,IAAR,CAAV;AAEH,GALD,CAKE,OAAOM,KAAP,EAAc;AACb,UAAMhB,GAAG,CAACO,YAAY,CAACS,KAAD,CAAb,CAAT;AACF;AACJ;AAED,OAAO,UAAUK,0BAAV,GAAsC;AACzC,QAAMvB,UAAU,CAACI,eAAe,CAACoB,+BAAjB,EAAiDC,mBAAjD,CAAhB;AACH;AAED,OAAO,UAAUA,mBAAV,CAA8B;AAACC,EAAAA,OAAO,EAAC;AAACC,IAAAA,KAAD;AAAOC,IAAAA;AAAP;AAAT,CAA9B,EAAyD;AAC5D,MAAI;AAEA,UAAM;AAAEhB,MAAAA;AAAF,QAAW,MAAMN,IAAI,CAACuB,0BAAL,CAAgCF,KAAhC,EAAuCC,QAAvC,CAAvB;AACA,UAAM3B,IAAI,CAACU,MAAD,EAAQC,IAAR,CAAV;AAEH,GALD,CAKE,OAAOM,KAAP,EAAc;AACb,UAAMhB,GAAG,CAACO,YAAY,CAACS,KAAD,CAAb,CAAT;AACF;AACJ;AAED,OAAO,UAAUY,kBAAV,GAA8B;AACjC,QAAM9B,UAAU,CAACI,eAAe,CAAC2B,kBAAjB,EAAoCC,mBAApC,CAAhB;AACH;AAED,OAAO,UAAUA,mBAAV,GAA+B;AACjC,MAAI;AACA,UAAMC,QAAQ,GAAG,MAAMzB,cAAc,EAArC;;AACA,QAAG,CAACyB,QAAJ,EAAa;AACT;AACH;;AACD,UAAMhC,IAAI,CAACU,MAAD,EAAQsB,QAAR,CAAV;AACH,GAND,CAME,OAAOf,KAAP,EAAc;AACZ,UAAMhB,GAAG,CAACO,YAAY,CAACS,KAAD,CAAb,CAAT;AACH;AACL;AAAAY,kBAAkB;AAGnB,OAAO,UAAUI,QAAV,GAAoB;AACvB,QAAM/B,GAAG,CAAC,CAACF,IAAI,CAACkB,mBAAD,CAAL,EAA2BlB,IAAI,CAACsB,0BAAD,CAA/B,EAA4DtB,IAAI,CAAC6B,kBAAD,CAAhE,CAAD,CAAT;AACH","sourcesContent":["import {takeLatest,call,put,all} from 'redux-saga/effects';\r\nimport { userActionTypes }  from './User.Types';\r\nimport { googleProvider,auth,createUserProfileDocument,getCurrentUser } from '../../Firebase/Firebase.Utils';\r\nimport { signInFailed, signInSuccess } from './User.Action';\r\n\r\n\r\nfunction*  signIn(user){\r\n    try {\r\n        const userRef = yield call(createUserProfileDocument,user);\r\n        const userSnapShopt = yield userRef.get();\r\n\r\n        yield put(signInSuccess({id: userSnapShopt.id,...userSnapShopt.data()}))\r\n\r\n    } catch (error) {\r\n       yield put(signInFailed(error));\r\n    }\r\n}\r\n\r\nexport function* onGoogleSignInStart(){\r\n    yield takeLatest(userActionTypes.LOGIN_WITH_GOOGLE_START,signInWithGoogle);\r\n}\r\n\r\nexport function* signInWithGoogle(){\r\n    try {\r\n\r\n        const { user } = yield auth.signInWithPopup(googleProvider);\r\n        yield call(signIn,user);\r\n\r\n    } catch (error) {\r\n       yield put(signInFailed(error));\r\n    }\r\n}\r\n\r\nexport function* onEmailPasswordSignInStart(){\r\n    yield takeLatest(userActionTypes.LOGIN_WITH_EMAIL_PASSWORD_START,emailPasswordSignIn);\r\n}\r\n\r\nexport function* emailPasswordSignIn({payload:{email,password}}){\r\n    try {\r\n\r\n        const { user } = yield auth.signInWithEmailAndPassword(email, password);\r\n        yield call(signIn,user);\r\n\r\n    } catch (error) {\r\n       yield put(signInFailed(error));\r\n    }\r\n}\r\n\r\nexport function* onCheckUserSession(){\r\n    yield takeLatest(userActionTypes.CHECK_USER_SESSION,isUserAuthenticated);\r\n}\r\n\r\nexport function* isUserAuthenticated(){\r\n     try {\r\n         const authUser = yield getCurrentUser();\r\n         if(!authUser){\r\n             return;\r\n         }\r\n         yield call(signIn,authUser);\r\n     } catch (error) {\r\n         yield put(signInFailed(error));\r\n     }\r\n}onCheckUserSession\r\n\r\n\r\nexport function* userSaga(){\r\n    yield all([call(onGoogleSignInStart),call(onEmailPasswordSignInStart),call(onCheckUserSession)]);\r\n}"]},"metadata":{},"sourceType":"module"}